---
import Base from "./Base.astro";
import TagList from "@components/TagList.astro";
import Metadata from "@components/Metadata.svelte";
import { Picture, getImage } from "astro:assets";
import type { CollectionEntry } from "astro:content";
import ReadingTime from "@components/ReadingTime.astro";
import fallbackSeoLogo from "@assets/article/seo-logo.webp";
import { Icon } from "astro-icon/components";

interface Props {
  title: CollectionEntry<"articles">["data"]["title"];
  date?: Date | string;
  tags?: CollectionEntry<"articles">["data"]["tags"];
  todo?: CollectionEntry<"articles">["data"]["todo"];
  coverImage?: CollectionEntry<"articles">["data"]["coverImage"];
  readingTime?: string;
  description?: string;
  frontmatter?: this;
  slug?: string;
}

const { title, date, tags, todo, coverImage, readingTime, description, slug } =
  Astro.props.frontmatter || Astro.props;

const coverImageRendered = await getImage({
  src: coverImage ?? fallbackSeoLogo,
  format: "jpg",
  height: 630,
  width: 1200,
});

const image = `${import.meta.env.SITE}${coverImageRendered.src}`;
---

<Base
  seo={{
    title,
    description:
      description?.split(" ").slice(0, 20).join(" ").replace(/\D$/gi, "") +
      "...",
    keywords: tags,
    twitter: {
      card: "summary_large_image",
      site: "@PompeyBUG",
      image,
    },
    facebook: {
      image,
      url: Astro.request.url,
      type: "article",
    },
  }}
>
  <main>
    <div id="title">
      <h1 class="title">{title}</h1>
      {
        slug && (
          <button id="edit-button" role="link" data-show="false">
            <a href={`/editor?article=${slug}`} title="edit article">
              <Icon name="edit" />
            </a>
          </button>
        )
      }
    </div>
    {
      date && (
        <Metadata date={typeof date === "string" ? new Date(date) : date} />
      )
    }
    {readingTime && <ReadingTime readingTime={readingTime} />}
    {
      coverImage && (
        <Picture src={coverImage} alt={title} formats={["avif", "webp"]} />
      )
    }
    <article>
      <slot />
    </article>
    {
      todo && todo.length > 0 && (
        <>
          <hr />
          <h2>Work in progress&hellip;</h2>
          <ul>
            {todo.map((todo) => (
              <li>{todo}</li>
            ))}
          </ul>
        </>
      )
    }
  </main>
  <TagList tags={tags} slot="tags" />
</Base>

<script>
  const getSession = async () => {
    const res = await fetch("/api/auth/session");

    const session = await res.json();

    if (session) {
      const editButton = document.querySelector<HTMLButtonElement>(
        "main #title #edit-button"
      );

      if (editButton) {
        editButton.dataset.show = "true";
      }
    }
  };

  await getSession();
</script>

<style>
  main #title {
    display: flex;
    align-items: center;
    gap: calc(var(--fixedspace) * 0.5);
  }

  #edit-button[data-show="false"] {
    display: none;
  }

  #edit-button {
    background-color: var(--col2);
    border: 1px solid var(--page);
    border-radius: var(--buttoncurve);
    margin: 0;
    padding: 0;
  }

  #edit-button a {
    display: flex;
    justify-content: center;
    align-items: center;
    color: var(--page);
    background: var(--col2);
    border: none;
    padding: calc(var(--fixedspace) * 0.25);
  }

  #edit-button a:hover {
    cursor: pointer;
    background-color: var(--page);
    color: var(--col2);
    border: 1px solid var(--col2);
  }

  [data-icon="edit"] {
    font-size: 2em;
  }
</style>
