---
import Base from "./Base.astro";
import TagList from "@components/TagList.astro";
import Metadata from "@components/Metadata.svelte";
import { Picture, getImage } from "astro:assets";
import type { CollectionEntry } from "astro:content";
import ReadingTime from "@components/ReadingTime.astro";

interface Props {
  title: CollectionEntry<"articles">["data"]["title"];
  date?: Date | string;
  tags?: CollectionEntry<"articles">["data"]["tags"];
  todo?: CollectionEntry<"articles">["data"]["todo"];
  coverImage?: CollectionEntry<"articles">["data"]["coverImage"];
  readingTime?: string;
  description?: string;
  frontmatter?: this;
}

const { title, date, tags, todo, coverImage, readingTime, description } =
  Astro.props.frontmatter || Astro.props;

const coverImageRendered = coverImage
  ? await getImage({
      src: coverImage,
      format: "avif",
      height: 1200,
      width: 630,
    })
  : null;
---

<Base
  seo={{
    title,
    description,
    openGraph: {
      basic: {
        title,
        type: "article",
        image: coverImageRendered
          ? `${import.meta.env.SITE}${coverImageRendered.src}`
          : `${import.meta.env.SITE}/img/logo-w.svg`,
      },
      image: {
        type: coverImageRendered?.src ? "image/avif" : "image/svg+xml",
        height: 1200,
        width: 630,
        alt: title,
      },
      article: {
        publishedTime: (typeof date === "string"
          ? new Date(date)
          : date
        )?.toISOString(),
        tags,
      },
    },
    twitter: {
      card: "summary_large_image",
      site: "@PompeyBUG",
      title,
      image: coverImageRendered
        ? `${import.meta.env.SITE}${coverImageRendered.src}`
        : `${import.meta.env.SITE}/img/logo-w.svg`,
      imageAlt: title,
      description,
    },
  }}
>
  <main>
    <h1 class="title">{title}</h1>
    {
      date && (
        <Metadata date={typeof date === "string" ? new Date(date) : date} />
      )
    }
    {readingTime && <ReadingTime readingTime={readingTime} />}
    {
      coverImage && (
        <Picture src={coverImage} alt={title} formats={["avif", "webp"]} />
      )
    }
    <article>
      <slot />
    </article>
    {
      todo && todo.length > 0 && (
        <>
          <hr />
          <h2>Work in progress&hellip;</h2>
          <ul>
            {todo.map((todo) => (
              <li>{todo}</li>
            ))}
          </ul>
        </>
      )
    }
  </main>
  <TagList tags={tags} slot="tags" />
</Base>
