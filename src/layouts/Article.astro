---
import Base from "./Base.astro";
import TagList from "@components/TagList.astro";
import Metadata from "@components/Metadata.svelte";
import { Picture, getImage } from "astro:assets";
import type { CollectionEntry } from "astro:content";
import ReadingTime from "@components/ReadingTime.astro";
import fallbackSeoLogo from "@assets/article/seo-logo.webp";
import { Icon } from "astro-icon/components";

interface Props {
  title: CollectionEntry<"articles">["data"]["title"];
  date?: Date | string;
  tags?: CollectionEntry<"articles">["data"]["tags"];
  todo?: CollectionEntry<"articles">["data"]["todo"];
  coverImage?: CollectionEntry<"articles">["data"]["coverImage"];
  readingTime?: string;
  description?: string;
  frontmatter?: this;
  slug?: string;
}

const {
  title,
  date: dateMixed,
  tags,
  todo,
  coverImage,
  readingTime,
  description,
  slug,
} = Astro.props.frontmatter || Astro.props;

const getCoverImage = async () => {
  if (coverImage) {
    const coverImageRendered = await getImage({
      src: coverImage,
      format: "jpg",
      height: 630,
      width: 1200,
    });

    return coverImageRendered.src.slice(1);
  } else if (slug) {
    return `api/og/${slug}.png`;
  } else {
    const fallbackSeoLogoRendered = await getImage({
      src: fallbackSeoLogo,
      format: "jpg",
      height: 630,
      width: 1200,
    });

    return fallbackSeoLogoRendered.src.slice(1);
  }
};

const coverImageUrl = await getCoverImage();

const image = `${import.meta.env.DEV ? "http://localhost:4321/" : Astro.site}${coverImageUrl}`;

const date = typeof dateMixed === "string" ? new Date(dateMixed) : dateMixed;

const descriptionTrimmed = description
  ? description.split(" ").slice(0, 20).join(" ").replace(/\D$/gi, "") + "..."
  : description;
---

<Base
  {title}
  description={descriptionTrimmed ?? "An article by the Portsmouth Cycle Forum"}
  seo={{
    title,
    description: descriptionTrimmed,
    charset: "UTF-8",
    openGraph: {
      basic: { title, type: "article", image },
      optional: {
        description: descriptionTrimmed,
        siteName: "Portsmouth Cycle Forum",
      },
      image: { type: "image/png", height: 630, width: 1200, alt: title },
      article: {
        publishedTime: date?.toISOString(),
        tags,
      },
    },
    twitter: {
      card: "summary_large_image",
      site: "@PompeyBUG",
      creator: "@PompeyBUG",
      image,
      imageAlt: title,
      description: descriptionTrimmed,
    },
  }}
>
  <main>
    <div class="title-container">
      <h1 class="title">{title}</h1>
      {
        slug && (
          <button
            class="edit-button"
            aria-label="edit article"
            role="link"
            data-show="false"
          >
            <a
              href={`/editor?article=${slug}`}
              title="edit article"
              aria-label="edit article"
            >
              <Icon name="edit" />
            </a>
          </button>
        )
      }
    </div>
    {
      date && (
        <Metadata
          date={typeof date === "string" ? new Date(date) : date}
          loading="eager"
        />
      )
    }
    {readingTime && <ReadingTime readingTime={readingTime} />}
    {
      coverImage && (
        <Picture
          src={coverImage}
          alt={title}
          formats={["avif", "webp"]}
          loading="eager"
        />
      )
    }
    <article>
      <slot />
    </article>
    {
      todo && todo.length > 0 && (
        <>
          <hr />
          <h2>Work in progress&hellip;</h2>
          <ul>
            {todo.map((todo) => (
              <li>{todo}</li>
            ))}
          </ul>
        </>
      )
    }
  </main>
  <TagList tags={tags} slot="tags" />
</Base>

<script>
  const { $sessionIsValid } = await import("@lib/sessionStore");

  $sessionIsValid.listen((v) => {
    const editButton = document.querySelector(
      "main .title-container .edit-button"
    ) as HTMLButtonElement | null;

    if (!editButton) {
      return;
    }

    editButton.dataset.show = String(v);
  });
</script>

<style>
  main .title-container {
    display: flex;
    align-items: center;
    gap: calc(var(--fixedspace) * 0.5);
  }

  .edit-button[data-show="false"] {
    display: none;
  }

  .edit-button {
    background-color: var(--col2);
    border: 1px solid var(--page);
    border-radius: var(--buttoncurve);
    margin: 0;
    padding: 0;
  }

  .edit-button a {
    display: flex;
    justify-content: center;
    align-items: center;
    color: var(--page);
    background: var(--col2);
    border: none;
    padding: calc(var(--fixedspace) * 0.25);
  }

  .edit-button a:hover {
    cursor: pointer;
    background-color: var(--page);
    color: var(--col2);
    border: 1px solid var(--col2);
  }

  [data-icon="edit"] {
    font-size: 2em;
  }
</style>
