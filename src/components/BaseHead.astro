---
import { SEO, type Props as SeoProps } from 'astro-seo';
import { getImage } from 'astro:assets';
import fallbackSeoLogo from "@assets/article/seo-logo.webp";

interface Props {
  title: string;
  description?: string;
  seo?: SeoProps;
}

const { title, description, seo } = Astro.props;

const getCoverImage = async () => {
  if (seo?.openGraph?.basic.image) {
    return seo.openGraph.basic.image;
  } else {
    const coverImageRendered = await getImage({
			src: fallbackSeoLogo,
			format: 'jpg',
			height: 630,
			width: 1200
		});

    return coverImageRendered.src.slice(1);
  }
};

const coverImageUrl = await getCoverImage();

const image = `${import.meta.env.DEV ? 'http://localhost:4321/' : Astro.site}${coverImageUrl}`;
---

<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<link rel="icon" href="/img/logo.svg" />
<link rel="mask-icon" href="/img/logo-w.svg" color='#FFFFFF' />
<link rel="apple-touch-icon" href="/img/logo.png" />
<meta name="theme-color" content="#c64d0f" />
<link rel="sitemap" href="/sitemap-index.xml" />
<SEO
	{title}
	{description}
	charset="UTF-8"
	openGraph={{
		basic: { title, type: 'website', image },
		optional: { description, siteName: 'Portsmouth Cycle Forum' },
		image: { type: 'image/png', height: 630, width: 1200, alt: title },
	}}
	twitter={{
		card: 'summary_large_image',
		site: '@PompeyBUG',
		creator: '@PompeyBUG',
		image,
		imageAlt: title,
		description
	}}
	{...seo}
/>
{import.meta.env.PROD && (
  <script
  type="text/partytown"
  src="/js/gtag.js"></script>
<script type="text/partytown">
window.dataLayer = window.dataLayer || [];
function gtag() {
  dataLayer.push(arguments);
}
gtag("set", "linker", { domains: ["pompeybug.co.uk"] });
gtag("set", "developer_id.dZTNiMT", true);
gtag("config", "UA-189037150-1", { anonymize_ip: true });
gtag("config", "G-EGJ3FP5YTZ");
</script>
)}

<script>
  let upticks = 0;
  let lastScroll = 0;

  const navmenu = document.querySelector('body > header');

  document.addEventListener('scroll', () => {
    const scrollTop = document.documentElement.scrollTop

    if (scrollTop < lastScroll) {
      upticks++;

      if (upticks > 50) {
        navmenu?.classList.add('header-sticky');
      }
    } else {
      navmenu?.classList.remove('header-sticky');
      upticks = 0;
    }

    lastScroll = scrollTop < 0 ? 0 : scrollTop;
  });
</script>
